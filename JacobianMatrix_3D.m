function [J,J_det] = JacobianMatrix_3D(s,t,w,x1,x2,x3,x4,x5,x6,x7,x8, ...
                                               y1,y2,y3,y4,y5,y6,y7,y8, ...
                                               z1,z2,z3,z4,z5,z6,z7,z8)

[dN1ds,dN1dt,dN1dw,dN2ds,dN2dt,dN2dw,dN3ds,dN3dt,dN3dw,dN4ds,dN4dt,dN4dw, ...
 dN5ds,dN5dt,dN5dw,dN6ds,dN6dt,dN6dw,dN7ds,dN7dt,dN7dw,dN8ds,dN8dt,dN8dw] = First_3D(s,t,w);

dxds = dN1ds * x1 + dN2ds * x2 + dN3ds * x3 + dN4ds * x4 ...
     + dN5ds * x5 + dN6ds * x6 + dN7ds * x7 + dN8ds * x8;
dxdt = dN1dt * x1 + dN2dt * x2 + dN3dt * x3 + dN4dt * x4 ...
     + dN5dt * x5 + dN6dt * x6 + dN7dt * x7 + dN8dt * x8;
dxdw = dN1dw * x1 + dN2dw * x2 + dN3dw * x3 + dN4dw * x4 ...
     + dN5dw * x5 + dN6dw * x6 + dN7dw * x7 + dN8dw * x8;

dyds = dN1ds * y1 + dN2ds * y2 + dN3ds * y3 + dN4ds * y4 ...
     + dN5ds * y5 + dN6ds * y6 + dN7ds * y7 + dN8ds * y8;
dydt = dN1dt * y1 + dN2dt * y2 + dN3dt * y3 + dN4dt * y4 ...
     + dN5dt * y5 + dN6dt * y6 + dN7dt * y7 + dN8dt * y8;
dydw = dN1dw * y1 + dN2dw * y2 + dN3dw * y3 + dN4dw * y4 ...
     + dN5dw * y5 + dN6dw * y6 + dN7dw * y7 + dN8dw * y8;

dzds = dN1ds * z1 + dN2ds * z2 + dN3ds * z3 + dN4ds * z4 ...
     + dN5ds * z5 + dN6ds * z6 + dN7ds * z7 + dN8ds * z8;
dzdt = dN1dt * z1 + dN2dt * z2 + dN3dt * z3 + dN4dt * z4 ...
     + dN5dt * z5 + dN6dt * z6 + dN7dt * z7 + dN8dt * z8;
dzdw = dN1dw * z1 + dN2dw * z2 + dN3dw * z3 + dN4dw * z4 ...
     + dN5dw * z5 + dN6dw * z6 + dN7dw * z7 + dN8dw * z8;

J = [dxds,dyds,dzds;
     dxdt,dydt,dzdt;
     dxdw,dydw,dzdw];

J_det = det(J);
end